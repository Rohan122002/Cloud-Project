pipeline {
    agent any

    environment {
        JMETER_IMAGE = 'jmeter-docker'
        RESULTS_DIR = "${WORKSPACE}/results"
        REPORT_MAIL = 'rohansutar122002@gmail.com'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/Rohan122002/Cloud-Project.git'
            }
        }

        stage('Sanity Test') {
            steps {
                script {
                    echo "Running Sanity Test..."
                    sh """
                        mkdir -p ${RESULTS_DIR}/sanity
                        docker run --rm -v "${WORKSPACE}/jmeter:/jmeter" -v "${RESULTS_DIR}/sanity:/jmeter/results" ${JMETER_IMAGE} \
                        -n -t /jmeter/JPet_store_Sanity.jmx -l /jmeter/results/result.jtl -e -o /jmeter/results/html
                    """
                }
            }
            post {
                success {
                    echo "✅ Sanity Passed!"
                    emailext subject: "Sanity Test Passed ✅",
                             body: "Sanity test passed. Approve for Smoke Test.",
                             to: "${REPORT_MAIL}"
                }
                failure {
                    echo "❌ Sanity Failed!"
                    emailext subject: "Sanity Test Failed ❌",
                             body: "Sanity test failed. Check attached report.",
                             attachmentsPattern: 'results/sanity/html/index.html',
                             to: "${REPORT_MAIL}"
                }
            }
        }

        stage('Approve Smoke Test') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                timeout(time: 2, unit: 'HOURS') {
                    input message: 'Approve to run Smoke Test?', ok: 'Proceed'
                }
            }
        }

        stage('Smoke Test') {
            steps {
                script {
                    echo "Running Smoke Test..."
                    sh """
                        mkdir -p ${RESULTS_DIR}/smoke
                        docker run --rm -v "${WORKSPACE}/jmeter:/jmeter" -v "${RESULTS_DIR}/smoke:/jmeter/results" ${JMETER_IMAGE} \
                        -n -t /jmeter/JPet_store_Smoke.jmx -l /jmeter/results/result.jtl -e -o /jmeter/results/html
                    """
                }
            }
            post {
                success {
                    emailext subject: "Smoke Test Passed ✅",
                             body: "Smoke test passed. Approve for Load Test.",
                             to: "${REPORT_MAIL}"
                }
                failure {
                    emailext subject: "Smoke Test Failed ❌",
                             body: "Smoke test failed. See report attached.",
                             attachmentsPattern: 'results/smoke/html/index.html',
                             to: "${REPORT_MAIL}"
                }
            }
        }

        stage('Approve Load Test') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                timeout(time: 2, unit: 'HOURS') {
                    input message: 'Approve to run Load Test?', ok: 'Proceed'
                }
            }
        }

        stage('Load Test') {
            steps {
                script {
                    echo "Running Load Test..."
                    sh """
                        mkdir -p ${RESULTS_DIR}/load
                        docker run --rm -v "${WORKSPACE}/jmeter:/jmeter" -v "${RESULTS_DIR}/load:/jmeter/results" ${JMETER_IMAGE} \
                        -n -t /jmeter/JPet_store_Load.jmx -l /jmeter/results/result.jtl -e -o /jmeter/results/html
                    """
                }
            }
            post {
                always {
                    emailext subject: "Load Test Completed",
                             body: "Load test execution completed. Report attached.",
                             attachmentsPattern: 'results/load/html/index.html',
                             to: "${REPORT_MAIL}"
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'results/**', fingerprint: true
        }
    }
}
